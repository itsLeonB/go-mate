// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/itsLeonB/go-mate/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// AddSubscription provides a mock function with given fields: ctx, request
func (_m *SubscriptionService) AddSubscription(ctx context.Context, request *model.NewSubscriptionRequest) (*model.UserSubscriptionResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for AddSubscription")
	}

	var r0 *model.UserSubscriptionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.NewSubscriptionRequest) (*model.UserSubscriptionResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.NewSubscriptionRequest) *model.UserSubscriptionResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserSubscriptionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.NewSubscriptionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
