// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/itsLeonB/go-mate/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RecommendationService is an autogenerated mock type for the RecommendationService type
type RecommendationService struct {
	mock.Mock
}

// GetUserRecommendations provides a mock function with given fields: ctx
func (_m *RecommendationService) GetUserRecommendations(ctx context.Context) ([]*model.UserResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRecommendations")
	}

	var r0 []*model.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.UserResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.UserResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogAction provides a mock function with given fields: ctx, request
func (_m *RecommendationService) LogAction(ctx context.Context, request *model.LogActionRequest) (*model.RecommendationLogResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for LogAction")
	}

	var r0 *model.RecommendationLogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.LogActionRequest) (*model.RecommendationLogResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.LogActionRequest) *model.RecommendationLogResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RecommendationLogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.LogActionRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRecommendationService creates a new instance of RecommendationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecommendationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecommendationService {
	mock := &RecommendationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
