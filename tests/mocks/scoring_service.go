// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/itsLeonB/go-mate/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ScoringService is an autogenerated mock type for the ScoringService type
type ScoringService struct {
	mock.Mock
}

// ScoreAndSortUsers provides a mock function with given fields: ctx, users, isExtraRecommendation
func (_m *ScoringService) ScoreAndSortUsers(ctx context.Context, users []*entity.User, isExtraRecommendation bool) ([]*entity.User, error) {
	ret := _m.Called(ctx, users, isExtraRecommendation)

	if len(ret) == 0 {
		panic("no return value specified for ScoreAndSortUsers")
	}

	var r0 []*entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.User, bool) ([]*entity.User, error)); ok {
		return rf(ctx, users, isExtraRecommendation)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.User, bool) []*entity.User); ok {
		r0 = rf(ctx, users, isExtraRecommendation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*entity.User, bool) error); ok {
		r1 = rf(ctx, users, isExtraRecommendation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewScoringService creates a new instance of ScoringService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScoringService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ScoringService {
	mock := &ScoringService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
