// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/itsLeonB/go-mate/internal/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RecommendationLogRepository is an autogenerated mock type for the RecommendationLogRepository type
type RecommendationLogRepository struct {
	mock.Mock
}

// FindTodayLogByUserIDAndRecommendedUserID provides a mock function with given fields: ctx, userID, recommendedUserID
func (_m *RecommendationLogRepository) FindTodayLogByUserIDAndRecommendedUserID(ctx context.Context, userID uuid.UUID, recommendedUserID uuid.UUID) (*entity.RecommendationLog, error) {
	ret := _m.Called(ctx, userID, recommendedUserID)

	if len(ret) == 0 {
		panic("no return value specified for FindTodayLogByUserIDAndRecommendedUserID")
	}

	var r0 *entity.RecommendationLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*entity.RecommendationLog, error)); ok {
		return rf(ctx, userID, recommendedUserID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *entity.RecommendationLog); ok {
		r0 = rf(ctx, userID, recommendedUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RecommendationLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, recommendedUserID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTodayLogsByUserID provides a mock function with given fields: ctx, userID
func (_m *RecommendationLogRepository) FindTodayLogsByUserID(ctx context.Context, userID uuid.UUID) ([]*entity.RecommendationLog, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindTodayLogsByUserID")
	}

	var r0 []*entity.RecommendationLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entity.RecommendationLog, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entity.RecommendationLog); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.RecommendationLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLogs provides a mock function with given fields: ctx, logs
func (_m *RecommendationLogRepository) InsertLogs(ctx context.Context, logs []*entity.RecommendationLog) error {
	ret := _m.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for InsertLogs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.RecommendationLog) error); ok {
		r0 = rf(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, log
func (_m *RecommendationLogRepository) Update(ctx context.Context, log *entity.RecommendationLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.RecommendationLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRecommendationLogRepository creates a new instance of RecommendationLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecommendationLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecommendationLogRepository {
	mock := &RecommendationLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
